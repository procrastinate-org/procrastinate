[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
pattern = "default-unprefixed"

[tool.hatch.build.targets.sdist]
include = ["procrastinate"]
exclude = ["procrastinate/demos"]

[tool.hatch.build.targets.wheel]
exclude = ["procrastinate/demos"]

[project]
name = "procrastinate"
dynamic = ["version"]
description = "Postgres-based distributed task processing library"
license-files = ["LICENSE.md"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
]
authors = [
    { name = "Joachim Jablon", email = "ewjoachim@gmail.com" },
    { name = "Eric Lemoine" },
    { name = "Kai Schlamp" },
]
readme = "README.md"
keywords = ["postgres", "task-queue"]
requires-python = ">=3.9"
dependencies = [
    "psycopg[pool]",
    "asgiref",
    "attrs",
    "contextlib2; python_version < '3.10'",
    "croniter",
    "python-dateutil",
    "typing-extensions",
]

[project.optional-dependencies]
django = ["django>=2.2"]
sqlalchemy = ["sqlalchemy~=2.0"]
aiopg = ["aiopg", "psycopg2-binary"]
psycopg2 = ["psycopg2-binary"]
sphinx = ["sphinx"]
reload = ["watchfiles>=0.21.0"]

[project.urls]
homepage = "https://procrastinate.readthedocs.io/"
source = "https://github.com/procrastinate-org/procrastinate/"
documentation = "https://procrastinate.readthedocs.io/"
issues = "https://github.com/procrastinate-org/procrastinate/issues"
changelog = "https://github.com/procrastinate-org/procrastinate/releases"

[project.scripts]
procrastinate = 'procrastinate.cli:main'

[tool.uv]
cache-keys = [{ git = { commit = true, tags = true } }]
required-version = ">=0.5.21"
default-groups = ["release", "lint_format", "pg_implem", "test", "docs"]

[dependency-groups]
types = ["django-stubs"]
release = ["dunamai"]
lint_format = ["ruff", "django-upgrade"]
pg_implem = [
    "aiopg",
    "sqlalchemy",
    "psycopg2-binary",
    "psycopg[binary,pool]; sys_platform != 'darwin' or platform_machine != 'arm64'",
    "psycopg[binary,pool]; sys_platform == 'darwin' and platform_machine == 'arm64' and python_version >= '3.10'",
    "psycopg[pool]; sys_platform == 'darwin' and platform_machine == 'arm64' and python_version < '3.10'",
]
test = [
    "pytest-asyncio",
    "pytest-benchmark",
    "pytest-cov",
    "pytest-django",
    "pytest-mock",
    "migra",
    # migra depends on schemainspect, which has an implicit dependency on setuptools
    # (pkg_resources).
    "setuptools",
]
docs = [
    "django>=2.2",
    "furo",
    "Sphinx",
    "sphinx-copybutton",
    "sphinx-github-changelog",
    "sphinxcontrib-programoutput",
    "sphinxcontrib-mermaid",
    "myst-parser",
]
dev = ["ruff", "pyright", "doc8"]

[tool.pytest.ini_options]
addopts = ["-vv", "--strict-markers", "-rfE", "--reuse-db", "-m not benchmark"]
testpaths = [
    "tests/unit",
    "tests/integration",
    "tests/acceptance",
    "tests/migration",
    "tests/benchmarks",
]
# https://adamj.eu/tech/2025/01/08/django-silence-exception-ignored-outputwrapper/
# https://code.djangoproject.com/ticket/36056
filterwarnings = """
    error
    ignore:.+django.core.management.base.OutputWrapper:pytest.PytestUnraisableExceptionWarning
    ignore:unclosed.+:ResourceWarning
    ignore:pkg_resources is deprecated as an API:UserWarning
"""
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
django_find_project = false
DJANGO_SETTINGS_MODULE = "tests.acceptance.django_settings"
pythonpath = ["."]

[tool.coverage.run]
relative_files = true
omit = [
    "procrastinate/contrib/django/migrations/*",
    # It really wouldn't make sense to test the admin config, I guess ?
    "procrastinate/contrib/django/admin.py",

]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "coverage: exclude",
    "if TYPE_CHECKING:",
    "[ ]+\\.\\.\\.$",
]

[tool.pyright]
exclude = ["tests", ".venv", "scripts"]

[tool.ruff]
target-version = "py39"
extend-exclude = [".venv"]

[tool.ruff.lint]
extend-select = [
    "UP",  # pyupgrade
    "I",   # isort
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "RUF", # ruff
]
fixable = ["ALL"]
extend-ignore = [
    "E501", # line too long
    # It's not exactly false but it's not supported enough by our dependencies,
    # so ruff is fighting with Pyright on this.
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.doc8]
max-line-length = 88
ignore-path = "docs/_build,.venv"

[tool.sync-pre-commit-with-uv.pyright-python]
pypi_package_name = "pyright"
additional_dependencies_uv_params = [
    "--group=types",
    "--no-group=release",
    "--no-group=lint_format",
    "--no-group=pg_implem",
    "--no-group=test",
    "--no-group=docs",
    "--all-extras",
]
